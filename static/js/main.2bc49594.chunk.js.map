{"version":3,"sources":["components/UsersList.js","components/ButtonFetchUsers.js","components/App.js","serviceWorker.js","index.js"],"names":["UserList","props","console","log","users","map","user","react_default","a","createElement","key","login","uuid","src","picture","large","alt","name","last","concat","first","email","className","reverse","ButtonFetchUsers","style","padding","border","backgroundColor","margin","fontWeight","onClick","click","API","App","state","handleDataFetch","fetch","then","response","ok","Error","status","json","data","results","_this","setState","prevState","catch","error","this","components_ButtonFetchUsers","length","components_UsersList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAgBeA,eAbE,SAAAC,GACfC,QAAQC,IAAIF,EAAMG,OAElB,IAAMA,EAAQH,EAAMG,MAAMC,IAAI,SAAAC,GAAI,OAChCC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAKK,MAAMC,MACnBL,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAKQ,QAAQC,MAAOC,IAAKV,EAAKW,KAAKC,OAC7CX,EAAAC,EAAAC,cAAA,aAAAU,OAAQb,EAAKW,KAAKG,MAAlB,KAAAD,OAA2Bb,EAAKW,KAAKC,OACrCX,EAAAC,EAAAC,cAAA,SAAIH,EAAKe,UAGb,OAAOd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,SAASlB,EAAMmB,aCMxBC,EAjBU,SAAAvB,GACvB,OACEM,EAAAC,EAAAC,cAAA,UACEgB,MAAO,CACLC,QAAS,YACTC,OAAQ,kBACRC,gBAAiB,SACjBC,OAAQ,GACRC,WAAY,QAEdC,QAAS9B,EAAM+B,OARjB,2BCCEC,EAAG,uCAsCMC,6MAnCbC,MAAQ,CACN/B,MAAO,MAGTgC,gBAAkB,WAEhBC,MAAMJ,GACHK,KAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAMF,EAASG,UAEtBJ,KAAK,SAAAC,GAAQ,OAAIA,EAASI,SAC1BL,KAAK,SAAAM,GACJ,IAAMtC,EAAOsC,EAAKC,QAElBC,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1B5C,MAAO4C,EAAU5C,MAAMe,OAAOb,QAGjC2C,MAAM,SAAAC,GAAK,OAAIhD,QAAQC,IAAI+C,EAAQ,mGAGtC,IAAM9C,EAAQ+C,KAAKhB,MAAM/B,MAEzB,OACEG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2C,EAAD,CAAkBpB,MAAOmB,KAAKf,kBAC7BhC,EAAMiD,OAAS,EAAI9C,EAAAC,EAAAC,cAAC6C,EAAD,CAAWlD,MAAOA,IAAYA,UA9BxCmD,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.2bc49594.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./UsersList.css\";\r\n\r\nconst UserList = props => {\r\n  console.log(props.users);\r\n\r\n  const users = props.users.map(user => (\r\n    <div key={user.login.uuid}>\r\n      <img src={user.picture.large} alt={user.name.last} />\r\n      <h4>{`${user.name.first} ${user.name.last}`}</h4>\r\n      <p>{user.email}</p>\r\n    </div>\r\n  ));\r\n  return <div className=\"users\">{users.reverse()}</div>;\r\n};\r\n\r\nexport default UserList;\r\n","import React from \"react\";\r\n\r\nconst ButtonFetchUsers = props => {\r\n  return (\r\n    <button\r\n      style={{\r\n        padding: \"10px 20px\",\r\n        border: \"2px solid white\",\r\n        backgroundColor: \"orange\",\r\n        margin: 20,\r\n        fontWeight: \"bold\"\r\n      }}\r\n      onClick={props.click}\r\n    >\r\n      Dodaj użytkownika\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ButtonFetchUsers;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport UsersList from \"./UsersList\";\nimport ButtonFetchUsers from \"./ButtonFetchUsers\";\n\nconst API = `https://randomuser.me/api/?results=1`;\n\nclass App extends Component {\n  state = {\n    users: []\n  };\n\n  handleDataFetch = () => {\n    // console.log(\"clikc\");\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(response.status);\n      })\n      .then(response => response.json())\n      .then(data => {\n        const user = data.results;\n\n        this.setState(prevState => ({\n          users: prevState.users.concat(user)\n        }));\n      })\n      .catch(error => console.log(error + \". Błądzisz\"));\n  };\n  render() {\n    const users = this.state.users;\n\n    return (\n      <div>\n        <ButtonFetchUsers click={this.handleDataFetch} />\n        {users.length > 0 ? <UsersList users={users} /> : users}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}